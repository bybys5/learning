<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:websocket="http://www.springframework.org/schema/websocket"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket.xsd">

    <context:component-scan base-package="own.jadezhang.learning.apple.controller" use-default-filters="false">
        <context:include-filter type="annotation"
                                expression="org.springframework.stereotype.Controller"></context:include-filter>
    </context:component-scan>

    <!--使 @RequestMapping, @ExceptionHandler等其他注解（有关数据格式转换的）起作用-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean class="org.springframework.http.converter.BufferedImageHttpMessageConverter"/>
            <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
                <!--<property name="features">
                    <list>
                        <value type="com.alibaba.fastjson.serializer.SerializerFeature">WriteMapNullValue</value>
                        <value type="com.alibaba.fastjson.serializer.SerializerFeature">WriteNullStringAsEmpty</value>
                    </list>
                </property>-->
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!--<mvc:annotation-driven>
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="objectMapper">
                    <bean class="com.fasterxml.jackson.databind.ObjectMapper">
                        <property name="dateFormat">
                            <bean class="java.text.SimpleDateFormat">
                                <constructor-arg>
                                    <value>yyyy-MM-dd HH:mm:ss</value>
                                </constructor-arg>
                            </bean>
                        </property>
                        <property name="serializationInclusion">
                            <value type="com.fasterxml.jackson.annotation.JsonInclude.Include">NON_NULL</value>
                        </property>
                    </bean>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>-->

    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="utf-8"/>
    </bean>

    <!-- WebSocket engine 属性配置（适用Tomcat, WildFly, GlassFish环境）-->
    <bean class="org.springframework.web.socket.server.standard.ServletServerContainerFactoryBean">
        <property name="maxTextMessageBufferSize" value="8192"/>
        <property name="maxBinaryMessageBufferSize" value="8192"/>
    </bean>

<!--    &lt;!&ndash; 配置 websocket 消息处理器，allowed-origins允许通信的站点
        allowed-origins 三种模式：
        1.默认，WebSocket and SockJS 只允许来自同一站点的请求（JSONP,IE 6,7 均无法使用）
        2.指定系列站点：必须以 http:// 或 https:// 打头（限制同上，且IE9也不支持）
        3.允许所有站点：指定指为 *
    &ndash;&gt;
    <websocket:handlers allowed-origins="*">
        <websocket:mapping path="/messageHandler" handler="websocketMessageHandler"/>
        <websocket:sockjs/>
    </websocket:handlers>
    <bean id="websocketMessageHandler"
          class="own.jadezhang.learning.apple.controller.websocket.WebsocketMessageHandler"/>-->


    <!-- Simple Broker-->
    <websocket:message-broker application-destination-prefix="/app">
        <websocket:stomp-endpoint path="/learning" allowed-origins="*">
            <websocket:sockjs/>
        </websocket:stomp-endpoint>
        <!-- topic用于发布-订阅消息模式； queue用于 端到端消息模式 -->
        <websocket:simple-broker prefix="/topic, /queue"/>
    </websocket:message-broker>


    <!--&lt;!&ndash;Full-Featured Broker&ndash;&gt;
    <websocket:message-broker application-destination-prefix="/app">
        <websocket:stomp-endpoint path="/portfolio" allowed-origins="*">
            <websocket:sockjs/>
        </websocket:stomp-endpoint>
        <websocket:stomp-broker-relay prefix="/topic,/queue"/>
    </websocket:message-broker>-->
</beans>
